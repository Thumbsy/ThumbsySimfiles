<!-- Template taken from WinDEU: https://www.twitch.tv/windeu/v/58522987 -->

<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
			function inject_speed_mods(init_speed, pn, mode)
				-- Set some default values in case we're playing the file in the editor. Make sure to have the speed setting in the editor match this default value.
				if mode == 'editor' then
					init_speed = 450/155;
				end
				
				-- Here we add our player-tailored speed mods to the mod table.
				-- We can't use double-quotation characters, so we escape the apostrophe instead.
				-- What we want to do here is insert tables into mods[], with variable values.
				-- The format of these tables is as seen in the mods[] table.
				mods[table.getn(mods)+1] = {0, '\' *' .. 1000 .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {99.75, '\' *' .. 1.148*(init_speed-0.75) .. ' ' .. 0.75 .. 'x', pn}
				mods[table.getn(mods)+1] = {102, '\' *' .. 1.292*(init_speed-0.75) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {119.5, '\' *' .. 1000 .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {192.25, '\' *' .. 1000 .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.5, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. 1.5*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.563, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.625, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. 1.5*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.688, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.75, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. 1.5*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.813, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.875, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. 1.5*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {196.938, '\' *' .. 40*(1.5*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.167, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. 2*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.25, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.333, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. 2*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.417, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.5, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. 2*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.583, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.667, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. 2*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {198.75, '\' *' .. 15.385*(2*init_speed - init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {209, '\' *' .. 5.181*(init_speed - 0.25*init_speed) .. ' ' .. 0.25*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {215, '\' *' .. 10.362*(init_speed - 0.5*init_speed) .. ' ' .. 0.75*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {215.25, '\' *' .. 10.362*(init_speed - 0.25*init_speed) .. ' ' .. 0.5*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {215.5, '\' *' .. 10.362*(init_speed - 0.75*init_speed) .. ' ' .. 1.25*init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {215.75, '\' *' .. 10.362*(init_speed - 0.25*init_speed) .. ' ' .. init_speed .. 'x', pn}
				mods[table.getn(mods)+1] = {228, '\' *' .. 0.861*(init_speed - 0.5) .. ' ' .. 0.5 .. 'x', pn}
				mods[table.getn(mods)+1] = {231, '\' *' .. 5.155*(init_speed - 0.5) .. ' ' .. init_speed .. 'x', pn}
			end
		
			checked = false;
			prefix_time = 0;
			max_players = 2;
			bpm = 155;
			init_player_speed = {}; -- This table stores the value of the XMod that the player chose. Left as nil otherwise. First entry is first player.
						
			mods = {
				{119, '*1000 74x'},
				{192, '*1000 0.5x'},
			}
						
			self:queuecommand('Update');
		end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
						
			----------------------------------------------------------
			-- Mod reader code, beat-based and oITG editor friendly --
			----------------------------------------------------------
			-- Small edit on WinDEU's take on the code originally by TaroNuke
			-- Loop through the entries in mods[], first checking the first entry of the table (which holds the beat value).
			-- If the mod needs to be applied, check whether the table holds three values (which indicates the mod being targeted at a specific player).
			-- The mod is then applied, either for a specific player or for both.
			for i,v in pairs(mods) do
				if beat >= v[1] and (beat-v[1]) < 1 then
					if table.getn(v) == 3 then
						GAMESTATE:ApplyGameCommand('mod,'..v[2],v[3]);
					else
						GAMESTATE:ApplyGameCommand('mod,'..v[2]);
					end
				end
			end
			
			if beat >= 0 and not checked then
				-- Obtain initial speed settings of the players, then add speed mods to the mod table based on these initial speeds.
				-- Speed mod will be set to XMod for all players regardless of what they pick, with the XMod based on their speed setting
				-- Thanks to Jerros for sharing very useful code to make this easier!
				if SCREENMAN:GetTopScreen():GetChild('PlayerP1') or SCREENMAN:GetTopScreen():GetChild('PlayerP2') then
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP1') or SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP2') then
						-- SCREENMAN:SystemMessage('Game mode');
						for pn=1,max_players do
							if SCREENMAN:GetTopScreen():GetChild('PlayerP' .. pn) then
								local s = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..pn):GetText();
								local f = string.find(s,'x,');
								local speed = 1;
								if f then
									speed = tonumber(string.sub(s,1,f-1));
								elseif string.sub(s,1,1) == 'C' or string.sub(s,1,1) == 'm' then
									-- Player set either CMod or mMod. Read out their speed setting and convert it to the right XMod rate.
									local len = string.find(s,',')-1;
									speed = tonumber(string.sub(s,2,len))/bpm;
								end
								
								init_player_speed[pn] = speed;
								inject_speed_mods(init_player_speed[pn], pn);
							end
						end
					else
						-- Apparently PlayerOptionsP1/2 returns nil, which means we're in FUCK's editor
						-- SCREENMAN:SystemMessage('FUCK editor mode');
						for pn=1,max_players do
							inject_speed_mods(init_player_speed[pn], pn, 'editor');
						end
					end
				else
					-- Apparently PlayerP1/2 returns nil, which means we're in the SM3.95/oITG editor
					-- SCREENMAN:SystemMessage('oITG editor mode');
					inject_speed_mods(init_player_speed[pn], pn, 'editor');
				end
				
				checked = true;
			end
						
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame>
